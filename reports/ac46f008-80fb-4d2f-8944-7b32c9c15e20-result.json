{"name": "test_login", "status": "broken", "statusDetails": {"message": "configparser.NoOptionError: No option 'password' in section: 'api'", "trace": "self = <configparser.ConfigParser object at 0x107717410>, section = 'api', option = 'password'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n>           value = d[option]\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/configparser.py:788: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ChainMap({}, OrderedDict([('url', 'https://lk.moesk.ru/api/v1'), ('cl_url', 'http://10.0.3.107:3000/api/v1'), ('login', 'user@user.user'), ('cl_password', '!Q2w3e4r5t'), ('at_password', 'User12345')]), OrderedDict())\nkey = 'password'\n\n    def __getitem__(self, key):\n        for mapping in self.maps:\n            try:\n                return mapping[key]             # can't use 'key in mapping' with defaultdict\n            except KeyError:\n                pass\n>       return self.__missing__(key)            # support subclasses that define __missing__\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/collections/__init__.py:916: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ChainMap({}, OrderedDict([('url', 'https://lk.moesk.ru/api/v1'), ('cl_url', 'http://10.0.3.107:3000/api/v1'), ('login', 'user@user.user'), ('cl_password', '!Q2w3e4r5t'), ('at_password', 'User12345')]), OrderedDict())\nkey = 'password'\n\n    def __missing__(self, key):\n>       raise KeyError(key)\nE       KeyError: 'password'\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/collections/__init__.py:908: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_login():\n>       result = Api.login()\n\ntests_api/tests/test_login.py:7: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_api/utils/api.py:23: in login\n    password = Api.config.get('api', 'password')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <configparser.ConfigParser object at 0x107717410>, section = 'api', option = 'password'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n            value = d[option]\n        except KeyError:\n            if fallback is _UNSET:\n>               raise NoOptionError(option, section)\nE               configparser.NoOptionError: No option 'password' in section: 'api'\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/configparser.py:791: NoOptionError"}, "steps": [{"name": "Login", "status": "broken", "statusDetails": {"message": "configparser.NoOptionError: No option 'password' in section: 'api'\n", "trace": "  File \"/Users/nik/Documents/GitHub/moesk/tests_api/utils/api.py\", line 23, in login\n    password = Api.config.get('api', 'password')\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/configparser.py\", line 791, in get\n    raise NoOptionError(option, section)\n"}, "start": 1578597827101, "stop": 1578597827101}], "start": 1578597827101, "stop": 1578597827107, "uuid": "2e8db6e5-cdba-4806-98b3-07e9a025b466", "historyId": "e9007b3c9eb0c43cc15689ad4e592c75", "testCaseId": "8c4e19530360d0e2bf33133a3ee53763", "fullName": "tests_api.tests.test_login#test_login", "labels": [{"name": "parentSuite", "value": "tests_api.tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "MacBook-Air.local"}, {"name": "thread", "value": "8733-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests_api.tests.test_login"}]}