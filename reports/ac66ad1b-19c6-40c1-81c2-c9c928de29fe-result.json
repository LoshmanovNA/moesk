{"name": "test_login_existing_user_without_email", "status": "broken", "statusDetails": {"message": "Exception: (<class 'AttributeError'>, AttributeError(\"'NoneType' object has no attribute 'endswith'\"), <traceback object at 0x06C62940>)", "trace": "self = <moesk.tests_ui.tests.test_login_page.TestLoginExistingUser testMethod=test_login_existing_user_without_email>, selector = '#user_email', new_value = None, by = 'css selector', timeout = 10\nretry = False\n\n    def update_text(self, selector, new_value, by=By.CSS_SELECTOR,\n                    timeout=None, retry=False):\n        \"\"\" This method updates an element's text field with new text.\n            Has multiple parts:\n            * Waits for the element to be visible.\n            * Waits for the element to be interactive.\n            * Clears the text field.\n            * Types in the new text.\n            * Hits Enter/Submit (if the text ends in \"\\n\").\n            @Params\n            selector - the selector of the text field\n            new_value - the new value to type into the text field\n            by - the type of selector to search by (Default: CSS Selector)\n            timeout - how long to wait for the selector to be visible\n            retry - if True, use JS if the Selenium text update fails\n        \"\"\"\n        if not timeout:\n            timeout = settings.LARGE_TIMEOUT\n        if self.timeout_multiplier and timeout == settings.LARGE_TIMEOUT:\n            timeout = self.__get_new_timeout(timeout)\n        if page_utils.is_xpath_selector(selector):\n            by = By.XPATH\n        element = self.wait_for_element_visible(\n            selector, by=by, timeout=timeout)\n        self.__demo_mode_highlight_if_active(selector, by)\n        if not self.demo_mode:\n            self.__scroll_to_element(element)\n        try:\n            element.clear()\n        except (StaleElementReferenceException, ENI_Exception):\n            self.wait_for_ready_state_complete()\n            time.sleep(0.06)\n            element = self.wait_for_element_visible(\n                selector, by=by, timeout=timeout)\n            try:\n                element.clear()\n            except Exception:\n                pass  # Clearing the text field first isn't critical\n        except Exception:\n            pass  # Clearing the text field first isn't critical\n        self.__demo_mode_pause_if_active(tiny=True)\n        pre_action_url = self.driver.current_url\n        if type(new_value) is int or type(new_value) is float:\n            new_value = str(new_value)\n        try:\n>           if not new_value.endswith('\\n'):\nE           AttributeError: 'NoneType' object has no attribute 'endswith'\n\nenv\\lib\\site-packages\\seleniumbase-1.34.24-py3.7.egg\\seleniumbase\\fixtures\\base_case.py:319: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <moesk.tests_ui.tests.test_login_page.TestLoginExistingUser testMethod=test_login_existing_user_without_email>\n\n    @pytest.mark.negative\n    def test_login_existing_user_without_email(self):\n        \"\"\"\n        Авторизация под существующим пользователем и\n        и проверка нахождения на главной странице ЛК\n        \"\"\"\n        self.get(self.app_url)\n        self.login_user(None,\n>                       self.user_data.password)  # Вводим логин и пароль\n\ntests_ui\\tests\\test_login_page.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests_ui\\pages\\login_page.py:14: in login_user\n    self.update_text(self.login_page_locators.LOGIN_INPUT_EMAIL_CSS, login)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <moesk.tests_ui.tests.test_login_page.TestLoginExistingUser testMethod=test_login_existing_user_without_email>, selector = '#user_email', new_value = None, by = 'css selector', timeout = 10\nretry = False\n\n    def update_text(self, selector, new_value, by=By.CSS_SELECTOR,\n                    timeout=None, retry=False):\n        \"\"\" This method updates an element's text field with new text.\n            Has multiple parts:\n            * Waits for the element to be visible.\n            * Waits for the element to be interactive.\n            * Clears the text field.\n            * Types in the new text.\n            * Hits Enter/Submit (if the text ends in \"\\n\").\n            @Params\n            selector - the selector of the text field\n            new_value - the new value to type into the text field\n            by - the type of selector to search by (Default: CSS Selector)\n            timeout - how long to wait for the selector to be visible\n            retry - if True, use JS if the Selenium text update fails\n        \"\"\"\n        if not timeout:\n            timeout = settings.LARGE_TIMEOUT\n        if self.timeout_multiplier and timeout == settings.LARGE_TIMEOUT:\n            timeout = self.__get_new_timeout(timeout)\n        if page_utils.is_xpath_selector(selector):\n            by = By.XPATH\n        element = self.wait_for_element_visible(\n            selector, by=by, timeout=timeout)\n        self.__demo_mode_highlight_if_active(selector, by)\n        if not self.demo_mode:\n            self.__scroll_to_element(element)\n        try:\n            element.clear()\n        except (StaleElementReferenceException, ENI_Exception):\n            self.wait_for_ready_state_complete()\n            time.sleep(0.06)\n            element = self.wait_for_element_visible(\n                selector, by=by, timeout=timeout)\n            try:\n                element.clear()\n            except Exception:\n                pass  # Clearing the text field first isn't critical\n        except Exception:\n            pass  # Clearing the text field first isn't critical\n        self.__demo_mode_pause_if_active(tiny=True)\n        pre_action_url = self.driver.current_url\n        if type(new_value) is int or type(new_value) is float:\n            new_value = str(new_value)\n        try:\n            if not new_value.endswith('\\n'):\n                element.send_keys(new_value)\n                if settings.WAIT_FOR_RSC_ON_PAGE_LOADS:\n                    self.wait_for_ready_state_complete()\n            else:\n                new_value = new_value[:-1]\n                element.send_keys(new_value)\n                element.send_keys(Keys.RETURN)\n                if settings.WAIT_FOR_RSC_ON_PAGE_LOADS:\n                    self.wait_for_ready_state_complete()\n        except (StaleElementReferenceException, ENI_Exception):\n            self.wait_for_ready_state_complete()\n            time.sleep(0.06)\n            element = self.wait_for_element_visible(\n                selector, by=by, timeout=timeout)\n            element.clear()\n            if not new_value.endswith('\\n'):\n                element.send_keys(new_value)\n            else:\n                new_value = new_value[:-1]\n                element.send_keys(new_value)\n                element.send_keys(Keys.RETURN)\n                if settings.WAIT_FOR_RSC_ON_PAGE_LOADS:\n                    self.wait_for_ready_state_complete()\n        except Exception:\n            exc_message = self.__get_improved_exception_message()\n>           raise Exception(exc_message)\nE           Exception: (<class 'AttributeError'>, AttributeError(\"'NoneType' object has no attribute 'endswith'\"), <traceback object at 0x06C62940>)\n\nenv\\lib\\site-packages\\seleniumbase-1.34.24-py3.7.egg\\seleniumbase\\fixtures\\base_case.py:345: Exception"}, "description": "\n        Авторизация под существующим пользователем и\n        и проверка нахождения на главной странице ЛК\n        ", "steps": [{"name": "login_user", "status": "broken", "statusDetails": {"message": "Exception: (<class 'AttributeError'>, AttributeError(\"'NoneType' object has no attribute 'endswith'\"), <traceback object at 0x06C62940>)\n", "trace": "  File \"C:\\GitHub\\moesk\\env\\lib\\site-packages\\allure_commons\\_allure.py\", line 157, in impl\n    return func(*a, **kw)\n  File \"C:\\GitHub\\moesk\\tests_ui\\pages\\login_page.py\", line 14, in login_user\n    self.update_text(self.login_page_locators.LOGIN_INPUT_EMAIL_CSS, login)\n  File \"C:\\GitHub\\moesk\\env\\lib\\site-packages\\seleniumbase-1.34.24-py3.7.egg\\seleniumbase\\fixtures\\base_case.py\", line 345, in update_text\n    raise Exception(exc_message)\n"}, "parameters": [{"name": "login", "value": "None"}, {"name": "password", "value": "'!Q2w3e4r5t'"}], "start": 1580113955934, "stop": 1580113956267}], "start": 1580113950025, "stop": 1580113960174, "uuid": "464af3d3-b547-41c6-b359-30f7855a4c77", "historyId": "e8e940d9979d19cad4bdcd6b47374158", "testCaseId": "929ad5ade4b17ecef8a50bc8d611e97a", "fullName": "tests_ui.tests.test_login_page.TestLoginExistingUser#test_login_existing_user_without_email", "labels": [{"name": "tag", "value": "existing_user"}, {"name": "tag", "value": "negative"}, {"name": "parentSuite", "value": "tests_ui.tests"}, {"name": "suite", "value": "test_login_page"}, {"name": "subSuite", "value": "TestLoginExistingUser"}, {"name": "host", "value": "LoshmanovNA-PC"}, {"name": "thread", "value": "20120-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests_ui.tests.test_login_page"}]}