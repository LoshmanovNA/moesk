{
  "uid" : "e7009cbd91124147",
  "name" : "test_registration_form",
  "fullName" : "tests_ui.tests.test_registration_page.TestRegistrationPage#test_registration_form",
  "historyId" : "90244e8ae0d213be40fd2c6c3f382c4b",
  "time" : {
    "start" : 1580060729531,
    "stop" : 1580060732432,
    "duration" : 2901
  },
  "description" : "\n        Генерируем тестовые данные и регистрируем пользователя типа ФЛ, проверям страницу\n        подтверждения регистрации, проверяем наличие нового email в БД, удаляем новую УЗ из БД\n        ",
  "descriptionHtml" : "<pre><code>    Генерируем тестовые данные и регистрируем пользователя типа ФЛ, проверям страницу\n    подтверждения регистрации, проверяем наличие нового email в БД, удаляем новую УЗ из БД\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "TypeError: string indices must be integers",
  "statusTrace" : "self = <moesk.tests_ui.tests.test_registration_page.TestRegistrationPage testMethod=test_registration_form>\n\n    def setUp(self):\n>       super(TestRegistrationPage, self).setUp()\n\ntests_ui/tests/test_registration_page.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <moesk.tests_ui.tests.test_registration_page.TestRegistrationPage testMethod=test_registration_form>\n\n    def setUp(self):\n        super(BasePage, self).setUp()\n        config = Config()\n        # For global environment use config['GLOBAL']\n        env = config[self.env.upper()]  # Берем значение заданного окружения (TEST, PRODUCTION, etc)\n    \n        self.app_url = env['app_url']\n        print(env)\n        # Создание соединения с БД\n>       db = DBModel(self.env['db_host'],\n                     self.env['db_username'],\n                     self.env['db_password'],\n                     self.env['db_schema'],\n                     int(self.env['db_port']))\nE       TypeError: string indices must be integers\n\ntests_ui/pages/base_page.py:27: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_UnitTestCase__pytest_class_setup",
    "time" : {
      "start" : 1580060729529,
      "stop" : 1580060729529,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "_UnitTestCase__pytest_class_setup::0",
    "time" : {
      "start" : 1580060732667,
      "stop" : 1580060732667,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests_ui.tests"
  }, {
    "name" : "suite",
    "value" : "test_registration_page"
  }, {
    "name" : "subSuite",
    "value" : "TestRegistrationPage"
  }, {
    "name" : "host",
    "value" : "MacBook-Air.local"
  }, {
    "name" : "thread",
    "value" : "18032-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_ui.tests.test_registration_page"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "e7009cbd91124147.json",
  "parameterValues" : [ ]
}