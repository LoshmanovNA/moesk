{
  "uid" : "de36046ab3fffff8",
  "name" : "test_login_new_user",
  "fullName" : "tests_ui.tests.test_login_page.TestLoginNewUser#test_login_new_user",
  "historyId" : "3cc973731901ebddb6ca4ad47861a0bd",
  "time" : {
    "start" : 1580111034246,
    "stop" : 1580111038126,
    "duration" : 3880
  },
  "status" : "broken",
  "statusMessage" : "KeyError: 'db_host'",
  "statusTrace" : "self = <moesk.tests_ui.tests.test_login_page.TestLoginNewUser testMethod=test_login_new_user>\n\n    @allure.step\n    def setUp(self):\n        \"\"\"Генерируем данные для нового пользователя и выполняем регистрацию\"\"\"\n>       super(TestLoginNewUser, self).setUp()\n\ntests_ui\\tests\\test_login_page.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <moesk.tests_ui.tests.test_login_page.TestLoginNewUser testMethod=test_login_new_user>\n\n    def setUp(self):\n        \"\"\"\n        Действия перед выполнением тестов:\n        - парсим config.ini,\n        - создаем соединение с БД,\n        - создаем класс с пользовательскими тестовыми данными\n        \"\"\"\n        super(BasePage, self).setUp()\n    \n        config = Config()\n        # For global environment use config['GLOBAL']\n        env = config[self.env.upper()]  # Берем значение заданного окружения (TEST, PRODUCTION, etc)\n    \n        self.app_url = env['app_url']\n    \n        # Создание соединения с БД\n>       db_credentials = DBModel(env['db_host'],\n                                 env['db_username'],\n                                 env['db_password'],\n                                 env['db_schema'],\n                                 int(env['db_port']))\nE       KeyError: 'db_host'\n\ntests_ui\\pages\\base_page.py:34: KeyError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_UnitTestCase__pytest_class_setup",
    "time" : {
      "start" : 1580111034245,
      "stop" : 1580111034245,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "KeyError: 'db_host'",
    "statusTrace" : "self = <moesk.tests_ui.tests.test_login_page.TestLoginNewUser testMethod=test_login_new_user>\n\n    @allure.step\n    def setUp(self):\n        \"\"\"Генерируем данные для нового пользователя и выполняем регистрацию\"\"\"\n>       super(TestLoginNewUser, self).setUp()\n\ntests_ui\\tests\\test_login_page.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <moesk.tests_ui.tests.test_login_page.TestLoginNewUser testMethod=test_login_new_user>\n\n    def setUp(self):\n        \"\"\"\n        Действия перед выполнением тестов:\n        - парсим config.ini,\n        - создаем соединение с БД,\n        - создаем класс с пользовательскими тестовыми данными\n        \"\"\"\n        super(BasePage, self).setUp()\n    \n        config = Config()\n        # For global environment use config['GLOBAL']\n        env = config[self.env.upper()]  # Берем значение заданного окружения (TEST, PRODUCTION, etc)\n    \n        self.app_url = env['app_url']\n    \n        # Создание соединения с БД\n>       db_credentials = DBModel(env['db_host'],\n                                 env['db_username'],\n                                 env['db_password'],\n                                 env['db_schema'],\n                                 int(env['db_port']))\nE       KeyError: 'db_host'\n\ntests_ui\\pages\\base_page.py:34: KeyError",
    "steps" : [ {
      "name" : "setUp",
      "time" : {
        "start" : 1580111034246,
        "stop" : 1580111038124,
        "duration" : 3878
      },
      "status" : "broken",
      "statusMessage" : "KeyError: 'db_host'\n",
      "statusTrace" : "  File \"C:\\GitHub\\moesk\\env\\lib\\site-packages\\allure_commons\\_allure.py\", line 157, in impl\n    return func(*a, **kw)\n  File \"C:\\GitHub\\moesk\\tests_ui\\tests\\test_login_page.py\", line 31, in setUp\n    super(TestLoginNewUser, self).setUp()\n  File \"C:\\GitHub\\moesk\\tests_ui\\pages\\base_page.py\", line 34, in setUp\n    db_credentials = DBModel(env['db_host'],\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 0,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "_UnitTestCase__pytest_class_setup::0",
    "time" : {
      "start" : 1580111040542,
      "stop" : 1580111040542,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "new_user"
  }, {
    "name" : "parentSuite",
    "value" : "tests_ui.tests"
  }, {
    "name" : "suite",
    "value" : "test_login_page"
  }, {
    "name" : "subSuite",
    "value" : "TestLoginNewUser"
  }, {
    "name" : "host",
    "value" : "LoshmanovNA-PC"
  }, {
    "name" : "thread",
    "value" : "19572-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests_ui.tests.test_login_page"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "new_user" ]
  },
  "source" : "de36046ab3fffff8.json",
  "parameterValues" : [ ]
}